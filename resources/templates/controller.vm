<?php
declare(strict_types=1);
namespace App\Controller\Admin;

use Hyperf\HttpMessage\Stream\SwooleStream;
use Liuxinyang\HyperfAdmin\Controller\Admin\AbstractAdminController;
use App\Model\#upperClassName#;
use Yangliuxin\Utils\Utils\ServiceConstant;
use Hyperf\HttpServer\Annotation\Controller;
use Hyperf\HttpServer\Annotation\RequestMapping;
use Hyperf\HttpServer\Annotation\Middleware;
use Liuxinyang\HyperfAdmin\Middleware\AuthMiddleware;
use Liuxinyang\HyperfAdmin\Annotaion\PermissionCheck;

#[Controller]
#[Middleware(AuthMiddleware::class)]
class #upperClassName#Controller extends AbstractAdminController
{
    #[RequestMapping('/admin/#lowerPathName#',  methods: ['GET'])]
    #[PermissionCheck('#lowerPathName#')]
    public function list#upperClassName#()
    {
        $user = $this->user;
        $where = [];
        $id = $this->request->input('id', 0);
        if($id){
            $where[] = ['id', '=' ,$id];
        }
        $#lowerClassName#List = #upperClassName#::where($where)->orderBy('id', 'asc')->paginate(20);
        $this->bladeData['#lowerClassName#List'] = $#lowerClassName#List;
        $this->bladeData['pageNo'] = $#lowerClassName#List->currentPage();
        $totalPages = floor($#lowerClassName#List->total() / $#lowerClassName#List->perPage()) + ($#lowerClassName#List->total() % $#lowerClassName#List->perPage() == 0 ? 0 : 1);
        $this->bladeData['totalPages'] = $totalPages;
        $this->bladeData['total'] = $#lowerClassName#List->total();
        $this->bladeData['pageNums'] = $#lowerClassName#List->perPage();
        return $this->render->render('admin/#lowerPathName#/list', $this->bladeData);
    }

    #[RequestMapping('/admin/#lowerPathName#/create',  methods: ['GET', 'POST'])]
    #[PermissionCheck('#lowerPathName#')]
    public function create#upperClassName#()
    {
        $user = $this->user;
        $data = new #upperClassName#();
        $this->bladeData["error"] = [];
        $this->bladeData['data'] = $data;
        if($this->request->isMethod("POST")){
            $csrf_token = $this->request->input('csrf_token');
            if(!$csrf_token || $csrf_token != $this->session->get('csrf_token')){
                $errors['title'] = 'csrf token error';
                return $this->render->render('admin/#lowerPathName#/edit', ['error' => $errors]);
            }

#modelRequest#

            #upperClassName#::create($modelData);
            return $this->response->redirect("/admin/#lowerPathName#");
        }
        return $this->render->render('admin/#lowerPathName#/edit', $this->bladeData);
    }

    #[RequestMapping('/admin/#lowerPathName#/edit/{id}',  methods: ['GET', 'POST'])]
    #[PermissionCheck('#lowerPathName#')]
    public function edit#upperClassName#($id)
    {
        if(!$id){
            return $this->response->redirect('/admin/#lowerPathName#');
        }
        $user = $this->user;
        $data = #upperClassName#::find($id);
        $this->bladeData["error"] = [];
        $this->bladeData['data'] = $data;
        if($this->request->isMethod("POST")){
            $csrf_token = $this->request->input('csrf_token');
            if(!$csrf_token || $csrf_token != $this->session->get('csrf_token')){
                $errors['title'] = 'csrf token error';
                return $this->render->render('admin/#lowerPathName#/edit', ['error' => $errors]);
            }
#modelRequest#

            #upperClassName#::where('id', $id)->update($modelData);
            return $this->response->redirect("/admin/#lowerPathName#");
        }

        return $this->render->render('admin/#lowerPathName#/edit', $this->bladeData);
    }

    #[RequestMapping('/admin/#lowerPathName#/delete/{id}',  methods: ['DELETE'])]
    #[PermissionCheck('#lowerPathName#')]
    public function delete#upperClassName#($id)
    {
        if(!$id){
            return $this->response->redirect('/admin/#lowerPathName#');
        }
        $user = $this->user;
        #upperClassName#::where('id', $id)->delete();
        return ServiceConstant::success();
    }

    #[RequestMapping('/admin/#lowerPathName#/export', methods: ['GET'])]
    #[PermissionCheck('#lowerPathName#')]
    public function export($id)
    {
        $user = $this->user;
        $exportTitle = '#exportTitle#';
        $exportContent = $exportTitle . "\n";
        $list = #upperClassName#::all()->toArray();
        foreach ($list as $key => $val) {
            $exportContent .= join(",", array_values($val)) . "\n";
        }

        return $this->response->withHeader('Content-type', 'application/vnd.ms-excel')
            ->withHeader('Content-Disposition', 'inline; filename=#lowerPathName#.csv')
            ->withBody(new SwooleStream((string)$exportContent));

    }
}